.. _{{ module }}_module:
.. include:: <isoamsa.txt>
.. |br| raw:: html

   <br />

.. Macros for table-building

{%- macro set_max_left(value, level) %}
{%    for line in value %}
{%      set max = line | string | length + (level * 2) %}
{%      if max > parsed.max_left %}
{%        set parsed.max_left = max %}
{%      endif %}
{%   endfor %}
{%- endmacro %}

{%- macro set_max_center(value) %}
{%    for line in value %}
{%      set max = line | string | length %}
{%      if max > parsed.max_center %}
{%        set parsed.max_center = max %}
{%      endif %}
{%    endfor %}
{%- endmacro %}

{%- macro set_max_right(value) %}
{%   for line in value %}
{%     set max = line | string | length %}
{%     if max > parsed.max_right %}
{%       set parsed.max_right = max %}
{%     endif %}
{%   endfor %}
{%- endmacro %}

{%- macro build_divider(level) %}
   +-{{ '+-' * level }}{{ '-' * (parsed.max_left - (level * 2)) }}-+-{{ '-' * parsed.max_center }}-+-{{ '-' * parsed.max_right }}-+
{%- endmacro %}

{%- macro build_content(level, left='', center='', right='') %}
   | {{ '| ' * level }}{{ left }}{{ ' ' * (parsed.max_left - (left | length) - (level * 2)) }} | {{ center }}{{ ' ' * (parsed.max_center - (center | length)) }} | {{ right }}{{ ' ' * (parsed.max_right - (right | length)) }} |
{%- endmacro %}

.. Start the module documentation

{% if short_description %}
{%   set title = module + ' -- ' + short_description | rst_ify %}
{% else %}
{%   set title = module %}
{% endif %}

.. title:: {{ title }}

{{ title }}
{{ '=' * title | length }}

.. contents::
   :local:
   :depth: 1

{% if description -%}
Synopsis
--------

{%   for desc in description %}
- {{ desc | rst_ify }}

{%   endfor %}
{% endif %}

{# TODO Handle module aliases #}

{% if requirements -%}
Requirements
------------
The below requirements are needed on the host that executes this module.

{%   for req in requirements %}
- {{ req | rst_ify }}
{%   endfor %}

{% endif %}

{%- macro parse_parameters(docs, level) %}
{%   set parsed.max_level = level %}
{%   for name, spec in docs.items() %}
{%     set row = {} %}
{%     do row.update(level=level) %}
{%     do row.update(name='**' + name + '**') %}
{%     do set_max_left([row.name], level) %}
{%     if 'type' in spec %}
{%       do row.update(value='``' + spec.type + '``') %}
{%       do set_max_left([row.value], level) %}
{%     endif %}
{%     if 'required' in spec %}
{%       do row.update(required=spec.required) %}
{%     endif %}
{%     if 'choices' in spec %}
{%       set choices = spec.choices | map('string') | map('prepend', ' - ') | list %}
{%       if 'default' in spec %}
{%         set choices = choices | map('replace', ' - ' + spec.default, ' - **' + spec.default + '** |larr|') | list %}
{%       endif %}
{%       do row.update(choices=choices) %}
{%       do set_max_center(row.choices) %}
{%     elif 'default' in spec %}
{%       do row.update(default='**' + spec.default | string + '**') %}
{%       do set_max_center([row.default]) %}
{%     endif %}
{%     if 'description' in spec %}
{%       do row.update(description=spec.description | map('string') | map('rst_ify') | list) %}
{%       do set_max_right(row.description) %}
{%     endif %}
{%     if 'aliases' in spec %}
{%       do row.update(aliases=spec.aliases | map('string') | map('rst_ify') | list | join(', ')) %}
{%       do set_max_right([row.aliases]) %}
{%     endif %}
{%     do parsed.rows.append(row) %}
{%     if 'suboptions' in spec %}
{%       do parse_parameters(spec.suboptions, level + 1) %}
{%     endif %}
{%   endfor %}
{%- endmacro %}

{% if options -%}
Parameters
----------

{% set parsed = namespace(rows=[], current_level=0, max_level=0, max_left=13, max_center=20, max_right=12) %}

{{ parse_parameters(options, 0) }}

.. table::
   :widths: 30 20 50

{{ build_divider(0) }}
{{ build_content(0, '**Parameter**', '**Choices/Defaults**', '**Comments**') }}
{% for row in parsed.rows %}
{%   set level = row.level if parsed.current_level < row.level else parsed.current_level %}
{%   set intra_count = 0 %}
{{ build_divider(level) }}
{%   if 'choices' in row %}
{{ build_content(row.level, left=row.name, center='**Choices:**', right=row.description[0] if row.description) }}
{%     for choice in row.choices %}
{%       if loop.index0 == 1 or loop.index0 == 5 %}
{%         set left_content = '|br|' %}
{%       elif loop.index0 == 3 %}
{%         set left_content = row.value %}
{%       elif loop.index0 == 7 and row.required %}
{%         set left_content = '*Required*' %}
{%       endif %}
{{ build_content(row.level, left=left_content, center=choice, right=row.description[loop.index] if row.description and row.description | length > loop.index0) }}
{%     endfor %}
{%     set intra_count = row.choices | length + 1 %}
{%   elif 'default' in spec %}
{{ build_content(row.level, left=row.name, center='**Default:**', right=row.description[0] if row.description) }}
{{ build_content(row.level, right=row.description[1] if row.description and row.description | length > 0) }}
{{ build_content(row.level, left='|br|', center='|br|', right=row.description[2] if row.description and row.description | length > 1) }}
{{ build_content(row.level, center=row.default, right=row.description[3] if row.description and row.description | length > 2) }}
{{ build_content(row.level, left=row.value, right=row.description[4] if row.description and row.description | length > 3) }}
{%     if row.required %}
{{ build_content(row.level, right=row.description[5] if row.description and row.description | length > 4) }}
{{ build_content(row.level, left='|br|', right=row.description[6] if row.description and row.description | length > 5) }}
{{ build_content(row.level, right=row.description[7] if row.description and row.description | length > 6) }}
{{ build_content(row.level, left='*Required*', right=row.description[8] if row.description and row.description | length > 7) }}
{%       set intra_count = 9 %}
{%     else %}
{%       set intra_count = 5 %}
{%     endif %}
{%   else %}
{{ build_content(row.level, left=row.name, right=row.description[0] if row.description) }}
{{ build_content(row.level, right=row.description[1] if row.description and row.description | length > 0) }}
{{ build_content(row.level, left='|br|', right=row.description[2] if row.description and row.description | length > 1) }}
{{ build_content(row.level, right=row.description[3] if row.description and row.description | length > 2) }}
{{ build_content(row.level, left=row.value, right=row.description[4] if row.description and row.description | length > 3) }}
{%     if row.required %}
{{ build_content(row.level, right=row.description[5] if row.description and row.description | length > 4) }}
{{ build_content(row.level, left='|br|', right=row.description[6] if row.description and row.description | length > 5) }}
{{ build_content(row.level, right=row.description[7] if row.description and row.description | length > 6) }}
{{ build_content(row.level, left='*Required*', right=row.description[8] if row.description and row.description | length > 7) }}
{%       set intra_count = 9 %}
{%     else %}
{%       set intra_count = 5 %}
{%     endif %}
{%   endif %}
{%   if row.description | length > intra_count %}
{%     set start = intra_count - 1 %}
{%     for line in row.description[start:] %}
{%       if intra_count + loop.index == 5 %}
{%         set left_content = row.value %}
{%       endif %}
{{ build_content(row.level, left=left_content, right=line) }}
{%     endfor %}
{%   endif %}
{%   if row.aliases %}
{{ build_content(row.level) }}
{{ build_content(row.level, right='|br|') }}
{{ build_content(row.level) }}
{{ build_content(row.level, right='*Aliases: ' + row.aliases + '*') }}
{%   endif %}
{%   set parsed.current_level = row.level %}
{%   if loop.index == parsed.rows | length %}
{{ build_divider(row.level) }}
{%   endif %}
{% endfor %}

{% endif %}

{% if notes -%}
Notes
-----

.. note::
{%   for note in notes %}
   - {{ note | rst_ify }}
{%   endfor %}
{% endif %}


{% if seealso -%}
See Also
--------

.. seealso::

{%   for item in seealso %}
{%     if item.module is defined and item.description is defined %}
   :ref:`{{ item.module }}_module`
       {{ item.description | rst_ify }}
{%     elif item.module is defined %}
   :ref:`{{ item.module }}_module`
      The official documentation on the **{{ item.module }}** module.
{%     elif item.name is defined and item.link is defined and item.description is defined %}
   `{{ item.name }} <{{ item.link }}>`_
       {{ item.description | rst_ify }}
{%     elif item.ref is defined and item.description is defined %}
   :ref:`{{ item.ref }}`
       {{ item.description | rst_ify }}
{%     endif %}
{%   endfor %}
{% endif %}


{% if examples -%}
Examples
--------

.. code-block:: yaml+jinja

{{ examples | indent(2, True) }}

{% endif %}

{% macro result_desc(results, level) %}
{%   for name, spec in results.items() %}
{%     set ret = spec.returned %}
{%     set typ = spec.type | default("any") %}
{%     set sample = spec.sample %}
{{ "  " * level }}{{ name }} ({{ ret }}, {{ typ }}, {{ sample }})
{%     for para in spec.description %}
  {{ "  " * level }}{{ para | rst_ify }}

{%     endfor %}

{%     if spec.contains %}
{{ result_desc(spec.contains, level + 1) }}
{%     endif %}
{%   endfor %}
{% endmacro %}

{%- macro parse_returndocs(docs, level) %}
{%   set parsed.max_level = level %}
{%   for name, spec in docs.items() %}
{%     set row = {} %}
{%     do row.update(level=level) %}
{%     do row.update(name='**' + name + '**') %}
{%     do set_max_left([row.name], level) %}
{%     if 'type' in spec %}
{%       do row.update(value='``' + spec.type + '``') %}
{%     endif %}
{%     do row.update(returned=spec.returned | string | rst_ify) %}
{%     do set_max_center([row.returned]) %}
{%     if 'description' in spec %}
{%       do row.update(description=spec.description | map('string') | map('rst_ify') | list) %}
{%       do set_max_right(row.description) %}
{%     endif %}
{%     if 'sample' in spec %}
{%       do row.update(sample=spec.sample | map('string') | map('rst_ify') | list) %}
{%       do set_max_right(row.sample) %}
{%     endif %}
{%     do parsed.rows.append(row) %}
{%     if 'contains' in spec %}
{%       do parse_returndocs(spec.contains, level + 1) %}
{%     endif %}
{%   endfor %}
{%- endmacro %}

{% if returndocs -%}
Return Values
-------------

Common return values are documented here, the following are fields unique to this module.

{% set parsed = namespace(rows=[], current_level=0, max_level=0, max_left=7, max_center=12, max_right=11) %}
{% do parse_returndocs(returndocs, 0) %}

.. table::
   :widths: 30 20 50

{{ build_divider(0) }}
{{ build_content(0, '**Key**', '**Returned**', '**Description**') }}
{% for row in parsed.rows %}
{%   set level = row.level if parsed.current_level < row.level else parsed.current_level %}
{{ build_divider(level) }}
{{ build_content(row.level, left=row.name, center=row.returned, right=row.description[0] if row.description) }}
{{ build_content(row.level, right=row.description[1] if row.description and row.description | length > 0) }}
{{ build_content(row.level, left='|br|', right=row.description[2] if row.description and row.description | length > 1) }}
{{ build_content(row.level, right=row.description[3] if row.description and row.description | length > 2) }}
{{ build_content(row.level, left=row.value, right=row.description[4] if row.description and row.description | length > 3) }}
{%   if row.description | length > 5 %}
{%     for line in row.description[4:] %}
{{ build_content(row.level, right=line) }}
{%     endfor %}
{%   endif %}
{%   if row.sample %}
{{ build_content(row.level) }}
{{ build_content(row.level, right='|br|') }}
{{ build_content(row.level) }}
{{ build_content(row.level, right='**Sample:**') }}
{{ build_content(row.level) }}
{%     for line in row.sample %}
{{ build_content(row.level, right=line) }}
{{ build_content(row.level) }}
{%     endfor %}
{%   endif %}
{%   set parsed.current_level = row.level %}
{%   if loop.index == parsed.rows | length %}
{{ build_divider(row.level) }}
{%   endif %}
{% endfor %}

{% endif %}

Status
------

{% if deprecated %}

- This {{ plugin_type }} will be removed in version
  {{ deprecated['removed_in'] | default('') | string | rst_ify }}.
  *[deprecated]*

{% else %}

{% set module_states = {
     "preview": "not guaranteed to have a backwards compatible interface",
     "stableinterface": "guaranteed to have backward compatible interface changes going forward",
   }
%}

{%   if metadata %}
{%     if metadata.status %}

{%       for cur_state in metadata.status %}
- This {{ plugin_type }} is {{ module_states[cur_state] }}. *[{{ cur_state }}]*
{%       endfor %}

{%     endif %}

{%     if metadata.supported_by %}
- This {{ plugin_type }} is maintained by {{ metadata.supported_by }}.
{%     endif %}

{%   endif %}

{% endif %}

{% if author is defined -%}
Authors
~~~~~~~

{%   for author_name in author %}
- {{ author_name }}
{%   endfor %}

{% endif %}